/*
 * locator.wire
 *
 *  Created on: 20 февр. 2016 г.
 *      Author: sergey.fedorov
 */

#ifndef WIRE_CORE_LOCATOR_WIRE_
#define WIRE_CORE_LOCATOR_WIRE_

#include <wire/core/adapter_admin.wire>
#include <wire/core/identity.wire>
#include <wire/core/object.wire>

namespace wire {
namespace core {

interface locator_registry;
exception object_not_found{
    identity id;
};

interface locator {
    /**
     * Find an object proxy by id
     * @param id
     * @return
     */
    object*
    find_object(identity id) const
        throw(object_not_found);

    /**
     * Find an adapter and return it's proxy (a dummy proxy
     * containing adapter's endpoints)
     * @param id
     * @return
     */
    object*
    find_adapter(identity id) const
        throw(no_adapter);

    /**
     * Get the locator registry object
     * @return
     */
    locator_registry*
    get_registry() const;
};

exception well_known_object_exists {};
exception adapter_exists {
    identity id;
};

interface locator_registry {
    /**
     * Add a well-known object to the registry.
     * @param obj Object proxy
     * @throw well_known_object_exists If the object with the same identity
     *      exists in the registry with different endpoints and is alive.
     */
    void
    add_well_known_object(object* obj)
        throw(well_known_object_exists);

    /**
     * Add adapter direct proxy, as created by the adapter itself.
     * @param adapter Direct proxy created by adapter object.
     * @throw adapter_exists if the adapter with the same identity and different
     *      endpoints exists in the registry.
     */
    void
    add_adapter(object* adapter)
        throw(adapter_exists);
    /**
     * Add replicated adapter to the registry. If there is already information
     * about such an adapter, endpoints are added.
     * @param adapter Direct proxy created by adapter object.
     * TODO Think about replica group names, for the adapters to be unique
     */
    void
    add_replicated_adapter(object* adapter);
    /**
     * Remove adapter info. If the adapter is replicated, only specified endpoints
     * are erased. If all enpoints are erased, adapter object is removed.
     * @param adapter Direct proxy created by adapter object.
     * @throw no_adapter If no adapter with such id is in the registry.
     */
    void
    remove_adapter(object* adapter)
        throw(no_adapter);
};

}  /* namespace core */
}  /* namespace wire */


#endif /* WIRE_CORE_LOCATOR_WIRE_ */
