/*
 * cpp_generator.cpp
 *
 *  Created on: 27 апр. 2016 г.
 *      Author: sergey.fedorov
 */

#include <wire/wire2cpp/cpp_generator.hpp>

#include <iostream>
#include <cctype>
#include <algorithm>
#include <boost/filesystem.hpp>

namespace wire {
namespace idl {
namespace cpp {

namespace {

::std::string const autogenerated =
R"~(/*
 * THIS FILE IS AUTOGENERATED BY wire2cpp PROGRAM
 * Any manual modifications can be lost
 */
)~";

}  /* namespace  */

namespace fs = ::boost::filesystem;

generator::generator(generate_options const& opts, ast::global_namespace_ptr ns)
    : ns_{ns}, unit_{ns->current_compilation_unit()}
{
    auto cwd = fs::current_path();
    ::std::cerr << "Current dir " << cwd << "\n";

    fs::path origin(unit_->name);
    fs::path header_path{ opts.header_output_dir };
    fs::path source_path{ opts.source_output_dir };

    if (header_path.empty()) {
        header_path = fs::current_path();
    }
    if (header_path.is_relative()) {
        header_path = fs::absolute(header_path);
    }
    if (!fs::exists(header_path)) {
        fs::create_directories(header_path);
    }
    header_path = fs::canonical(header_path);

    header_path /= origin.filename().stem().string() + ".hpp";

    if (source_path.empty()) {
        source_path = fs::current_path();
    }
    if (source_path.is_relative()) {
        source_path = fs::absolute(source_path);
    }
    if (!fs::exists(source_path)) {
        fs::create_directories(source_path);
    }
    source_path = fs::canonical(source_path);

    source_path /= origin.filename().stem().string() + ".cpp";

    ::std::cerr << "Will generate declarations for the following:\n"
        << origin.filename().string()
        << " -> " << header_path << " " << source_path << "\n";

    for (auto const& e : unit_->entities) {
        ::std::cerr << "\t" << e->get_qualified_name() << "\n";
    }

    header_guard_ = "_" + opts.header_include_dir + "_" +
            origin.stem().string() + "_HPP_";
    ::std::transform(header_guard_.begin(), header_guard_.end(),
            header_guard_.begin(), toupper);

    header_.open(header_path.string());
    source_.open(source_path.string());
    header_ << autogenerated
            << "#ifndef " << header_guard_ << "\n"
            "#define " << header_guard_ << "\n\n";
    source_ << autogenerated
            << "#include <" << opts.header_include_dir << "/"
            << origin.stem().string() << ".hpp>\n";
}

generator::~generator()
{
    header_ << "#endif /* " << header_guard_ << " */\n";
}

}  /* namespace cpp */
}  /* namespace idl */
}  /* namespace wire */
